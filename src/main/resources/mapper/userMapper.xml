<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.fastcampus.comicbookrental.repository.UserMapper">
    <select id="count" resultType="int">
        <include refid="selectCountFromUser"></include>
    </select>

    <delete id="deleteAll">
        DELETE FROM user
    </delete>

    <delete id="delete" parameterType="map">
        DELETE FROM user WHERE id = #{id}
    </delete>

    <delete id="deleteForAdmin" parameterType="map">
        DELETE FROM user WHERE id=#{id}
    </delete>

<!--    String id, Date birth, String email, String tel, String sex, String pwd, String name)-->
    <insert id="insert" parameterType="UserDTO">
        INSERT INTO user
            (id, birth, email, tel, sex, pwd, name)
        VALUES
            (#{id}, #{birth}, #{email}, #{tel}, #{sex}, #{pwd}, #{name})
    </insert>

    <select id="selectAll" resultType="UserDTO">
        SELECT (uno, id, birth, email, tel, sex, sns, isdeniedrental, isadmin, reg_date, pwd, name
        FROM user
        ORDER BY reg_date DESC, uno DESC
    </select>

    <sql id="selectFromUser">
        SELECT id, birth, email, tel, sex, sns, isdeniedrental, isadmin, reg_date, pwd, name
        FROM user
    </sql>
    <sql id="selectCountFromUser">
        SELECT count(*)
        FROM user
    </sql>

    <select id="select" parameterType="String" resultType="UserDTO">
        <include refid="selectFromUser"/>
        WHERE id = #{id}
    </select>

    <select id="selectPage" parameterType="map" resultType="UserDTO">
        <include refid="selectFromUser"/>
        ORDER BY reg_date DESC, uno DESC
        LIMIT #{offset}, #{pageSize}
    </select>

<!--    birth, email, tel, sex, pwd-->
    <update id="update" parameterType="UserDTO">
        UPDATE user
        SET   birth = #{birth}
          , email = #{email}
          , tel = #{tel}
          , sex = #{sex}
          , pwd = #{pwd}
          , up_date = now()
        WHERE id =#{id}
    </update>

<sql id="searchCondition">
    <choose>
        <when test='option=="N"'>
            and name like concat('%', #{keyword}, '%')
        </when>
        <when test='option=="id"'>
            and id like concat('%', #{keyword}, '%')
        </when>
        <otherwise>
            and name like concat('%', #{keyword}, '%')
            OR id like concat('%', #{keyword}, '%')
        </otherwise>
    </choose>
</sql>
<!--     검색 기능 추가-->
<!--     파라미터 타입을 SearchCondition 객체로 받아서 옵션을 넣는다.-->
<!--    SearchCondition을 패키지명 없이 사용하기 위해 config에서 별명 추가-->
    <select id="searchSelectPage" parameterType="SearchCondition" resultType="UserDTO">
        <include refid="selectFromUser"/>
        where true
        <include refid="searchCondition"></include>
        ORDER BY reg_date DESC, uno DESC
        LIMIT #{offset}, #{pageSize}
    </select>
<!--페이징을 하기위해 검색 결과 개수 구하기-->
    <select id="searchResultCnt" parameterType="SearchCondition" resultType="int">
    <include refid="selectCountFromUser"></include>
        WHERE true
        <include refid="searchCondition"></include>
    </select>

    <!-- 동적쿼리는 직접 작성하기 전에 미리 조건식에 해당하는 식들을 테스트 해본다음에 동적쿼리를 추가하는 방식으로 작성한다.-->


</mapper>
